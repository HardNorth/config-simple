buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "net.researchgate:gradle-release:2.8.1"
    }
}

apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'net.researchgate.release'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}
compileTestJava.options.encoding = "UTF-8"

project.ext.githubUserName = project.hasProperty('githubUserName') ? githubUserName : ""
project.ext.githubToken = project.hasProperty('githubToken') ? githubToken : ""
publishing {
    repositories {
        maven {
            name = "GitHub Packages"
            url = uri("https://maven.pkg.github.com/HardNorth/config-simple")
            credentials {
                username = githubUserName
                password = githubToken
            }
        }
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.cfg4j:cfg4j-core:4.4.1'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.apache.commons:commons-text:1.8'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${project.junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${project.junitVersion}"
    testImplementation "org.junit.platform:junit-platform-runner:${project.junitRunnerVersion}"
    testImplementation "org.junit.platform:junit-platform-console-standalone:${project.junitRunnerVersion}"
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

test {
    useJUnitPlatform()
    systemProperty("file.encoding", "utf-8")
    testLogging {
        exceptionFormat = 'full'
    }
    exclude('com/github/hardnorth/common/config/feature/**')
}

task uberjar(type: Jar) {
    archiveClassifier.set("all")
    from files(sourceSets.main.output.classesDirs)

    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': archiveVersion,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    getArchiveClassifier().set('sources')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    getArchiveClassifier().set('javadoc')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            description project.description

            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

def releaseDependencies = [publish]
releaseDependencies.addAll(afterReleaseBuild.getDependsOn())
afterReleaseBuild.setDependsOn(releaseDependencies)
